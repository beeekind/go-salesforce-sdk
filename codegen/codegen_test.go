package codegen_test

import (
	"testing"
	"text/template"

	"github.com/beeekind/go-salesforce-sdk/codegen"
	"github.com/stretchr/testify/require"
)

type renderInput struct {
	seed codegen.Seed
}

type renderOutput struct {
	description string
	src         codegen.Source
	err         error
}

var renderTests = map[*renderInput]*renderOutput{
	{codegen.Seed{
		OutputDirectory: "autogenerated",
		PackageName:     "metadata",
		Options: []codegen.Option{
			codegen.WithTemplateMap(map[string]*template.Template{
				"foo.go": template.Must(template.New("").Funcs(codegen.DefaultFuncMap).Parse("package {{.PackageName}}\ntype {{.Data.Name}} string")),
			}),
			codegen.WithData(struct{ Name string }{"foo"}),
		},
	}}: {"render non distinct seed with proper outputs", codegen.Source{
		"autogenerated/metadata/foo.go": []byte("package metadata\n\ntype foo string\n"),
	}, nil},
	{codegen.Seed{
		OutputDirectory:     "autogenerated",
		PackageName:         "objects",
		DistinctSubpackages: []string{"Lead"},
		Options: []codegen.Option{
			codegen.WithTemplateMap(map[string]*template.Template{
				"foo.go": template.Must(template.New("").Funcs(codegen.DefaultFuncMap).Parse("package {{.SubPackageName}}\ntype {{.Data.Name}} string")),
				"bar.go": template.Must(template.New("").Funcs(codegen.DefaultFuncMap).Parse("package {{.SubPackageName}}\ntype {{.Data.Name}} string")),
			}),
			codegen.WithDistinctData(map[string]interface{}{"Lead": struct{ Name string }{"foo"}}),
		},
	}}: {"render distinct seed with proper outputs", codegen.Source{
		"autogenerated/objects/leads/foo.go": []byte("package leads\n\ntype foo string\n"),
		"autogenerated/objects/leads/bar.go": []byte("package leads\n\ntype foo string\n"),
	}, nil},
}

func TestRender(t *testing.T) {
	for in, out := range renderTests {
		t.Run(out.description, func(t *testing.T) {
			src, err := codegen.Render(&in.seed)
			require.Equal(t, out.err, err)
			require.Equal(t, out.src, src)
		})
	}
}
