package {{.SubPackageName}}

// THIS PACKAGE IS AUTOGENERATED DO NOT EDIT 

import (
    {{- range .PackageImports}}
    {{.}}
    {{- end}}
)

// Sender is implemented by salesforce.Client and allows this package to make authenticated
// calls to the Salesforce REST API 
type Sender interface {
    // Do is a proxy of http.Do and assumes the underlying http.Client has been configured
	// to included an Authorization header that will authenticate all requests. 
	// See authhttp.go for an example of this configuration as used by salesforce.Client 
	Do(req *http.Request)(*http.Response, error)
	// QueryAll executes a SOQL query against a Salesforce query endpoint, following all
	// occurrences of NextRecordsUrl until all records have been gathered. It does this
	// with a preconfigured http.Client (see authhttp.go) so that requests are pre-authenticated
	// and use the proper salesforce instance url. All records are decoded into dst. Dst should
	// be a pointer to a struct and not a nil pointer reference.
	QueryAll(q string, dst interface{}) error
	// JSON sends a single http request to a preconfigured http.Client and decodes the
	// contents of response.Body into dst. Dst should be a pointer to a value and not a nil
	// pointer reference.
	JSON(req *http.Request, dst interface{}) (responseBody []byte, err error)
}

// Count returns a count with the given applied filters 
// https://salesforce.stackexchange.com/questions/208546/what-is-difference-between-count-and-limits-api-in-salesforce
func Count(sender Sender, filters ...string)(int, error){
    query, err := SOQLQuery("{{.SObject.Name}}", "", []string{"count()"}, 0, filters...)
    if err != nil {
        return 0, fmt.Errorf("Count(): %w", err)
    }

    req, err := BuildCount(query)
	if err != nil {
		return 0, fmt.Errorf("Count(2): %w", err)
	}

	var results QueryResponse
	if _, err := sender.JSON(req, &results); err != nil {
		return 0, fmt.Errorf("Count(3): %w", err)
	}

	return results.TotalSize, nil
}

// GetAll ... 
func GetAll(sender Sender, fields []string, order string, filters ...string)({{.SObject.Name | ToLower}}s []*{{.SObject.Name}}, err error){
    query, err := SOQLQuery("{{.SObject.Name}}", order, fields, 0, filters...)
    if err != nil {
        return nil, fmt.Errorf("GetAll(1): %w", err)
    }

    if err := sender.QueryAll(query, &{{.SObject.Name | ToLower}}s); err != nil {
        return nil, fmt.Errorf("GetAll(2): %w", err)
    }

    return {{.SObject.Name | ToLower}}s, nil 
}

// GetByID returns the result of /services/data/v50.0/sobjects/{{.SObject.Name}}/{id} which returns
// all standard and custom fields for the object. If you want only a subset of fields 
// use the Get() method with your desired fields and a limit of 1.
func GetByID(sender Sender, ID string, fields ...string)({{.SObject.Name | ToLower}} *{{.SObject.Name}}, err error){
    url := sobjectEndpoint + ID 
	req, err :=  http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, fmt.Errorf("GetByID(1): %w", err)
	}

	if _, err := sender.JSON(req, &{{.SObject.Name | ToLower}}); err != nil {
		return nil, fmt.Errorf("GetByID(2)")
	}

	return {{.SObject.Name | ToLower}}, nil 
}

// Create creates and saves a new {{.SObject.Name}} record. Parameters of this method are required fields
// are are included with the final {{.SObject.Name}} parameter. Validation is done to ensure required 
// fields are not nil. This means if you pass required params as zero values (string="", int=0, etc)
// then they will be saved as zero values, likely resulting in an error or other undesired
// behavior 
func Create(sender Sender,{{- range .SObject.Fields | RequiredFields}} {{.Name | ToLowerCamelCase}} {{.Type | ToGoValue}}, {{- end}} {{.SObject.Name | ToLower}} *{{.SObject.Name}})(result *CompositeResponseItem, err error){
    if {{.SObject.Name | ToLower}} == nil {
        {{.SObject.Name | ToLower}} = &{{.SObject.Name}}{{"{}"}} 
    }
    
    {{- range .SObject.Fields | RequiredFields}}
    {{$.SObject.Name | ToLower}}.{{.Name | ToFieldName}} = &{{.Name | ToLowerCamelCase}}
    {{- end}}

    if !Validate({{.SObject.Name | ToLower}}){
        return nil, errors.New("Create(1): could not validate {{.SObject.Name}}")
    }

    payload, err := json.Marshal({{.SObject.Name | ToLower}})
    if err != nil {
        return nil, fmt.Errorf("Create(2): %w", err)
    }

    req, err := http.NewRequest(http.MethodPost, sobjectEndpoint, bytes.NewBuffer(payload))
    if err != nil {
        return nil, fmt.Errorf("Create(3): %w", err)
    }

    req.Header.Add("Content-Type", "application/json")

    if _, err := sender.JSON(req, &result); err != nil {
        return nil, fmt.Errorf("Create(4): %w", err)
    }

    if len(result.Errors) > 0 {
        errorMsg := ""
        for _, compositeError := range result.Errors {
            errStr := compositeError.Message + ":"
            for _, f := range compositeError.Fields {
                errStr += f + "," 
            }
            errorMsg += errStr + "+"
        }
        return nil, errors.New("Create(5): " + errorMsg)
    }

    if !result.Success {
        return nil, errors.New("Create(5): result has no errors but success is false")
    }
    
    return result, nil 
}

// BuildCount ... 
func BuildCount(query string)(*http.Request, error){
    req, err := http.NewRequest(http.MethodGet, queryEndpoint, nil)
    if err != nil {
        return nil, fmt.Errorf("BuildCount(1): %w", err)
    }

    q := req.URL.Query()
	q.Add("q", query)
	req.URL.RawQuery = q.Encode()
	return req, nil 
}

// BulkCreate ... 
func BulkCreate(sender Sender, {{.SObject.Name | ToLower}}s ...*{{.SObject.Name}})(response []*CompositeResponseItem, err error){
    req, err := BuildCompositeCreate({{.SObject.Name | ToLower}}s...)
    if err != nil {
        return nil, fmt.Errorf("BulkCreate(): %w", err)
    }    

    if _, err := sender.JSON(req, &response); err != nil {
        return nil, fmt.Errorf("BulkCreate(): %w", err)
    }

    return response, nil 
}

// UpdateByID ...
// https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_update_fields.htm
// 
// IMPORTANT: successful requests to the PATCH endpoint do not return a response body
// so errors are derived from the HTTP status code 
func UpdateByID(sender Sender, ID string, {{.SObject.Name | ToLower}} *{{.SObject.Name}}) error {
    // updates should not contain an ID 
    {{.SObject.Name | ToLower}}.ID = nil 

    payload, err := json.Marshal({{.SObject.Name | ToLower}})
	if err != nil {
		return fmt.Errorf("Create(1): %w", err)
	}

	req, err := http.NewRequest(http.MethodPatch, sobjectEndpoint+ID, bytes.NewBuffer(payload))
	if err != nil {
		return fmt.Errorf("Create(2): %w", err)
	}

    req.Header.Add("Content-Type", "application/json")

	response, err := sender.Do(req)
	if err != nil {
		return fmt.Errorf("Create(3): %w", err)
	}

	if response.StatusCode >= 299 {
		return fmt.Errorf("Create(4): %w", errors.New(response.Status))
	}
    
    return nil 
}

// BulkUpdate updates the given records, ignoring any nil properties but keeping any zero values.
// https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_update.htm
//
// The update is transactional and will rollback in the event of an error 
//
// You canâ€™t update records for multiple object types in one call when one of those types 
// is related to a feature in the Salesforce Setup area.
func BulkUpdate(sender Sender, {{.SObject.Name | ToLower}}s ...*{{.SObject.Name}})(response []*CompositeResponseItem, err error){
    req, err := BuildCompositeUpdate({{.SObject.Name | ToLower}}s...)
    if err != nil {
        return nil, fmt.Errorf("BulkUpdate(): %w", err)
    }    

    if _, err := sender.JSON(req, &response); err != nil {
        return nil, fmt.Errorf("BulkUpdate(): %w", err)
    }

    return response, nil 
}

// DeleteByID ...
// https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_delete_record.htm
//
// IMPORTANT: successful requests to the DELETE endpoint do not return a response body so errors must
// be derived from the HTTP status code 
func DeleteByID(sender Sender, ID string) error {
    req, err := http.NewRequest(http.MethodDelete, sobjectEndpoint+ID, nil)
	if err != nil {
		return fmt.Errorf("Create(2): %w", err)
	}

	response, err := sender.Do(req)
	if err != nil {
		return fmt.Errorf("Create(3): %w", err)
	}

	if response.StatusCode >= 299 {
		return fmt.Errorf("Create(4): %w", errors.New(response.Status))
	}

	return nil
}

// BulkDelete ...
// https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_delete.htm
// 
// You can't delete records for multiple object types in one call when one of those types is 
// related to a feature in the Salesforce Setup area.
//
// Some world class documentation right there. 
func BulkDelete(sender Sender, {{.SObject.Name | ToLower}}s ...*{{.SObject.Name}})(response []*CompositeResponseItem, err error){
    req, err := BuildCompositeDelete({{.SObject.Name | ToLower}}s...)
    if err != nil {
        return nil, fmt.Errorf("BulkDelete(): %w", err)
    }

    if _, err := sender.JSON(req, &response); err != nil {
        return nil, fmt.Errorf("BulkDelete(): %w", err)
    }
    
    return response, nil 
}

// Validate an object is validated if all required fields are not nil, as they 
// will then at least be marshalled into their zero values when they are saved 
func Validate({{.SObject.Name | ToLower}} *{{.SObject.Name}}) bool {
    {{- range .SObject.Fields | RequiredFields}}
    if {{$.SObject.Name | ToLower}}.{{.Name | ToFieldName }} == nil {
        return false 
    }
    {{- end}}
    
    return true 
}

// Diff ... 
func Diff(old *{{.SObject.Name}}, new *{{.SObject.Name}}) bool {
    return false 
}

// BuildCompositeCreate ...
// https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_create.htm
func BuildCompositeCreate({{.SObject.Name | ToLower}}s ...*{{.SObject.Name}})(*http.Request, error){
    // using the composite sobject resource has a limit of 200 records of the same type
    if len({{.SObject.Name | ToLower}}s) > 200 {
        return nil, errors.New("BuildCompositeCreate(): len({{.SObject.Name | ToLower }}s) > 200")
    }

    // validate each record and add needed attributes for composite tree request 
    for i := 0; i < len({{.SObject.Name | ToLower}}s); i++ {
        if !Validate({{.SObject.Name | ToLower}}s[i]){
            return nil, fmt.Errorf("BuildCompositeCreate(): entry with index %v is not valid", i)
        }

        {{.SObject.Name | ToLower}}s[i].Attrs = &Attributes{
            Type: "{{.SObject.Name}}", 
            ReferenceID: "{{.SObject.Name | ToLower}}" + strconv.Itoa(i),
        }
    }

    payload, err := json.Marshal(CompositeRequest{{"{"}}AllOrNone: true, Records: {{.SObject.Name | ToLower}}s{{"}"}})
    if err != nil {
        return nil, fmt.Errorf("BuildCompositeCreate(): %w", err)
    }

    req, err := http.NewRequest(http.MethodPost, compositeSObjectsEndpoint,  bytes.NewReader(payload))
    if err != nil {
        return nil, fmt.Errorf("BuildCompositeCreate(): %w", err)
    }

    req.Header.Set("Content-Type", "application/json")
    // forces the API to follow default assignment rules for an objects OwnerID
    req.Header.Set("Sforce-Auto-Assign", "true")
    return req, nil 
}

// BuildCompositeDelete ... 
// https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_delete.htm
func BuildCompositeDelete({{.SObject.Name | ToLower}}s ...*{{.SObject.Name}})(*http.Request, error){
    // using the composite sobject resource has a limit of 200 records of the same type
    if len({{.SObject.Name | ToLower}}s) > 200 {
        return nil, errors.New("BuildCompositeCreate(): len({{.SObject.Name | ToLower }}s) > 200")
    }

    var IDs []string
	for i := 0; i < len({{.SObject.Name | ToLower}}s); i++ {
		IDs = append(IDs, *{{.SObject.Name | ToLower}}s[i].ID)
	}

    URL := fmt.Sprintf("%s?ids=%s", compositeSObjectsEndpoint, strings.Join(IDs, ","))
	req, err := http.NewRequest(http.MethodDelete, URL, nil)
    if err != nil {
        return nil, fmt.Errorf("BuildCompositeDelete(): %w", err)
    }

	return req, nil 
}

// BuildCompositeUpdate ...
//https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_update.htm
func BuildCompositeUpdate({{.SObject.Name | ToLower}}s ...*{{.SObject.Name}})(*http.Request, error){
    // using the composite sobject resource has a limit of 200 records of the same type
    if len({{.SObject.Name | ToLower}}s) > 200 {
        return nil, errors.New("BuildCompositeUpdate(): len({{.SObject.Name | ToLower }}s) > 200")
    }

    // validate each record has a valid id and valid attributes properties 
    for i := 0; i < len({{.SObject.Name | ToLower}}s); i++ {
        // ensure each updated record has an ID property 
        if {{.SObject.Name | ToLower}}s[i].ID == nil {
            return nil, fmt.Errorf("BuildCompositeUpdate(): {{.SObject.Name | ToLower}} at index %v has nil ID", i)
        }

        {{.SObject.Name | ToLower}}s[i].Attrs = &Attributes{
            Type: "{{.SObject.Name}}", 
            ReferenceID: "{{.SObject.Name | ToLower}}" + strconv.Itoa(i),
        }
    }

    payload, err := json.Marshal(CompositeRequest{{"{"}}AllOrNone: true, Records: {{.SObject.Name | ToLower}}s{{"}"}})
    if err != nil {
        return nil, fmt.Errorf("BuildUpdateComposite(): %w", err)
    }

    req, err := http.NewRequest(http.MethodPatch, compositeSObjectsEndpoint,  bytes.NewReader(payload))
    if err != nil {
        return nil, fmt.Errorf("BuildUpdateComposite(): %w", err)
    }

    req.Header.Set("Content-Type", "application/json")
    return req, nil 
}