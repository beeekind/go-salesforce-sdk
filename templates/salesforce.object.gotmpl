package {{.SubPackageName}}

// THIS PACKAGE IS AUTOGENERATED DO NOT EDIT 

import (
    {{- range .PackageImports}}
    {{.}}
    {{- end}}
)

// QueryResponse is the generic result of a query the the Query API endpoint
type QueryResponse struct {
	Count          int                  `json:"count"`
	Records        []*{{.SObject.Name}} `json:"records"`
	TotalSize      int                  `json:"totalSize,omitempty"`
	Done           *bool                `json:"done,omitempty"`
	NextRecordsURL string               `json:"nextRecordsUrl"`
}

// CompositeRequest https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_create.htm
type CompositeRequest struct {
    // Optional. Indicates whether to roll back the entire request when the creation 
    // of any object fails (true) or to continue with the independent creation of other 
    // objects in the request. The default is false.
    AllOrNone bool `json:"allOrNone"`
    // Required. A list of sObjects. In a POST request using sObject Collections, 
    // set the type attribute for each object, but donâ€™t set the id field for any object.
    Records []*{{.SObject.Name}} `json:"records"`
}

// CompositeResponseItem https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/responses_composite_sobject_tree.htm#topic-title
type CompositeResponseItem struct {
    ID string `json:"id"`
    Success bool `json:"success"`
    ReferenceID string `json:"referenceId"`
    Errors []*CompositeError `json:"errors"`
}

// CompositeError ... 
type CompositeError struct {
    StatusCode string `json:"statusCode"`
    Message string `json:"message"`
    Fields []string `json:"fields"`
}

// Attributes are metadata properties used in certain APIs such as the composite API
type Attributes struct {
    Type string `json:"type"`
    ReferenceID string `json:"referenceId"`
}

// MarshalJSON allows us to encode this object into JSON while omitting null values.
// Golang's omitempty is not suitable here because it will omit zero values when 
// desired behavior with the Salesforce API is to include them.
// i.e. 0, "", false, etc
func (sobject *{{.SObject.Name}}) MarshalJSON() ([]byte, error){
    if sobject.EncodeNull {
        return json.Marshal(sobject)
    }

    final := make(map[string]interface{})
    sobjectValue := reflect.ValueOf(*sobject)
    for i := 0; i < sobjectValue.Type().NumField(); i++ {
        keyParts := strings.Split(sobjectValue.Type().Field(i).Tag.Get("json"), ",")
        if len(keyParts) < 1 {
            return nil, errors.New("{{.SObject.Name}}.MarshalJSON(): len(keyparts) not > 1")
        }

        key := keyParts[0]
        if key == "-" {
            continue 
        }

        value := sobjectValue.Field(i).Interface()

        newVal := reflect.ValueOf(value)
		if value == nil || newVal.Kind() == reflect.Ptr && newVal.IsNil() || newVal.Kind() == reflect.Slice && len(value.(json.RawMessage)) == 0 {
			continue
		}

        // attributes are a nested struct that needs to be handled separately
        if key == "attributes" {
			payload, err := json.Marshal(value.(*Attributes))
            if err != nil {
                return nil, fmt.Errorf("{{.SObject.Name}}.MarshalJSON(): %w", err)
            }

            final[key] = json.RawMessage(payload)
			continue 
        }
        
        final[key] = value
    }

    return json.Marshal(final)
}

{{.SObject | ToSObjectTypeDefinition}}