package {{.SubPackageName}}

// THIS PACKAGE IS AUTOGENERATED DO NOT EDIT 

import (
    {{- range .PackageImports}}
    {{.}}
    {{- end}}
)

// QueryTemplate ...
var QueryTemplate = template.Must(template.New("").Parse(`
    SELECT {{"{{ .Fields }}"}} 
    FROM {{"{{ .ObjectName }}"}}
    {{"{{ if .Filters }}"}} 
    WHERE {{"{{ .Filters }}"}}
    {{"{{ end }}"}} 
    {{"{{ if .Order }}"}}
    ORDER BY {{"{{ .Order }}"}}
    {{"{{ end }}"}}
    {{"{{ if .Limit }}"}} 
    LIMIT {{"{{ .Limit }}"}}
    {{"{{ end }}"}}`,
))

// QueryTemplateData populates data for a QueryTemplate, what else would be for?
type QueryTemplateData struct {
    ObjectName string
    Fields     string
    Filters    string
    Order      string
    Limit      int
}

// SOQLQuery returns a SOQL query string formatted with the given selectors and conditionals.
//
// https://developer.salesforce.com/docs/atlas.en-us.secure_coding_guide.meta/secure_coding_guide/secure_coding_sql_injection.htm
//
// The Salesforce REST API Query endpoint claims to be a read only endpoint less vulnerable
// to sql injection. End users should be weary however of these vaguely documented protections,
// as well as query overload and similar attacks which seek to retrieve extraneous information from the query,
// rather then traditional sql injection attacks which drop tables or attempt other mischief.
func SOQLQuery(objectName string, order string, fields []string, limit int, filters ...string) (string, error) {
	buffer := bytes.NewBufferString("")
	input := QueryTemplateData{
		ObjectName: objectName,
		Fields:     strings.TrimSuffix(strings.Join(fields, ","), ","),
		Filters:    strings.TrimSuffix(strings.Join(filters, " AND "), " AND "),
		Order:      order,
		Limit:      limit,
	}

	if err := QueryTemplate.Execute(buffer, input); err != nil {
		return "", fmt.Errorf("SOQLQuery(): %w", err)
	}

	contents, err := ioutil.ReadAll(buffer)
	if err != nil {
		return "", fmt.Errorf("SOQLQuery(): %w", err)
	}

	return string(contents), nil
}

// MustSOQLQuery calls SOQLQuery and panics on the rare occurrence of an error during template
// execution or reading
func MustSOQLQuery(objectName string, order string, fields []string, limit int, filters ...string) string {
	q, err := SOQLQuery(objectName, order, fields, limit, filters...)
	if err != nil {
		panic(err)
	}

	return q
}
