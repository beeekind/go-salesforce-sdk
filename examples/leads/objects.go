package leads

// THIS PACKAGE IS AUTOGENERATED DO NOT EDIT

import "github.com/beeekind/go-salesforce-sdk/types"

// Lead ...
//
// Represents a prospect or lead.
type Lead struct {
	// AcceptedEventRelations ...
	AcceptedEventRelations struct {
		Done      bool                     `json:"done"`
		Count     int                      `json:"count"`
		TotalSize int                      `json:"totalSize"`
		Records   []*AcceptedEventRelation `json:"records"`
	} `json:"AcceptedEventRelations"`
	// ActivityHistories ...
	ActivityHistories struct {
		Done      bool               `json:"done"`
		Count     int                `json:"count"`
		TotalSize int                `json:"totalSize"`
		Records   []*ActivityHistory `json:"records"`
	} `json:"ActivityHistories"`
	// Actual_Do_Not_Call__c ...
	Actual_Do_Not_Call__c bool `json:"Actual_Do_Not_Call__c"`
	// Address ...
	//
	// The compound form of the address. Read-only. For details on compound address fields, see Address Compound
	// Fields.
	//
	// Properties:Filter, Nillable
	Address types.Address `json:"Address"`
	// AnnualRevenue ...
	//
	// Annual revenue for the lead’s company.
	//
	// Properties:Create, Filter, Nillable, Sort, Update
	AnnualRevenue types.NullableFloat64 `json:"AnnualRevenue"`
	// AttachedContentDocuments ...
	AttachedContentDocuments struct {
		Done      bool                       `json:"done"`
		Count     int                        `json:"count"`
		TotalSize int                        `json:"totalSize"`
		Records   []*AttachedContentDocument `json:"records"`
	} `json:"AttachedContentDocuments"`
	// Attachments ...
	Attachments struct {
		Done      bool          `json:"done"`
		Count     int           `json:"count"`
		TotalSize int           `json:"totalSize"`
		Records   []*Attachment `json:"records"`
	} `json:"Attachments"`
	// CampaignMembers ...
	CampaignMembers struct {
		Done      bool              `json:"done"`
		Count     int               `json:"count"`
		TotalSize int               `json:"totalSize"`
		Records   []*CampaignMember `json:"records"`
	} `json:"CampaignMembers"`
	// City ...
	//
	// City for the lead’s address.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	City types.NullableString `json:"City"`
	// CleanStatus ...
	//
	// Indicates the record’s clean status compared with Data.com. Values include: Matched, Different,
	// Acknowledged, NotFound, Inactive, Pending, SelectMatch, or Skipped.Several values for CleanStatus appear with
	// different labels on the lead record. Matched appears as In Sync Acknowledged appears as Reviewed Pending appears as
	// Not Compared
	//
	// Properties:Create, Filter, Group, Nillable, Restricted picklist, Sort, Update
	CleanStatus types.NullableString `json:"CleanStatus"`
	// CombinedAttachments ...
	CombinedAttachments struct {
		Done      bool                  `json:"done"`
		Count     int                   `json:"count"`
		TotalSize int                   `json:"totalSize"`
		Records   []*CombinedAttachment `json:"records"`
	} `json:"CombinedAttachments"`
	// Company ...
	//
	// Required. The lead’s company. Note If person account record types have been enabled, and if the value of
	// Company is null, the lead converts to a person account.
	//
	// Properties:Create, Filter, Group, Sort, Update
	Company string `json:"Company"`
	// CompanyDunsNumber ...
	//
	// The Data Universal Numbering System (D-U-N-S) number, which is a unique, nine-digit number assigned to
	// every business location in the Dun & Bradstreet database that has a unique, separate, and distinct operation.
	// Industries and companies use D-U-N-S numbers as a global standard for business identification and tracking. Maximum
	// size is 9 characters. Note This field is only available to organizations that use Data.com Prospector or
	// Data.com Clean.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	CompanyDunsNumber types.NullableString `json:"CompanyDunsNumber"`
	// ContactRequests ...
	ContactRequests struct {
		Done      bool              `json:"done"`
		Count     int               `json:"count"`
		TotalSize int               `json:"totalSize"`
		Records   []*ContactRequest `json:"records"`
	} `json:"ContactRequests"`
	// ContentDocumentLinks ...
	ContentDocumentLinks struct {
		Done      bool                   `json:"done"`
		Count     int                    `json:"count"`
		TotalSize int                    `json:"totalSize"`
		Records   []*ContentDocumentLink `json:"records"`
	} `json:"ContentDocumentLinks"`
	// ConvertedAccount ...
	ConvertedAccount *Account `json:"ConvertedAccount"`
	// ConvertedAccountID ...
	//
	// Object reference ID that points to the account into which the lead converted.
	//
	//
	// Properties:Filter, Group, Nillable, Sort
	ConvertedAccountID string `json:"ConvertedAccountId"`
	// ConvertedContact ...
	ConvertedContact *Contact `json:"ConvertedContact"`
	// ConvertedContactID ...
	//
	// Object reference ID that points to the contact into which the lead converted.
	//
	//
	// Properties:Filter, Group, Nillable, Sort
	ConvertedContactID string `json:"ConvertedContactId"`
	// ConvertedDate ...
	//
	// Date on which this lead was converted.
	//
	// Properties:Filter, Group, Nillable, Sort
	ConvertedDate types.Date `json:"ConvertedDate"`
	// ConvertedOpportunity ...
	ConvertedOpportunity *Opportunity `json:"ConvertedOpportunity"`
	// ConvertedOpportunityID ...
	//
	// Object reference ID that points to the opportunity into which the lead has been converted.
	//
	//
	// Properties:Filter, Group, Nillable, Sort
	ConvertedOpportunityID string `json:"ConvertedOpportunityId"`
	// Country ...
	//
	// The lead’s country.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Country types.NullableString `json:"Country"`
	// CreatedBy ...
	CreatedBy *User `json:"CreatedBy"`
	// CreatedByID ...
	CreatedByID string `json:"CreatedById"`
	// CreatedDate ...
	CreatedDate types.Datetime `json:"CreatedDate"`
	// CurrentGenerators__c ...
	CurrentGenerators__c types.NullableString `json:"CurrentGenerators__c"`
	// DandbCompany ...
	DandbCompany *DandBCompany `json:"DandbCompany"`
	// DandbCompanyID ...
	DandbCompanyID string `json:"DandbCompanyId"`
	// DeclinedEventRelations ...
	DeclinedEventRelations struct {
		Done      bool                     `json:"done"`
		Count     int                      `json:"count"`
		TotalSize int                      `json:"totalSize"`
		Records   []*DeclinedEventRelation `json:"records"`
	} `json:"DeclinedEventRelations"`
	// Description ...
	//
	// The lead’s description.
	//
	// Properties:Create, Nillable, Update
	Description types.NullableString `json:"Description"`
	// DuplicateRecordItems ...
	DuplicateRecordItems struct {
		Done      bool                   `json:"done"`
		Count     int                    `json:"count"`
		TotalSize int                    `json:"totalSize"`
		Records   []*DuplicateRecordItem `json:"records"`
	} `json:"DuplicateRecordItems"`
	// Email ...
	//
	// The lead’s email address.
	//
	// Properties:Create, Filter, Group, idLookup, Nillable, Sort,
	// Update
	Email types.NullableString `json:"Email"`
	// EmailBouncedDate ...
	//
	// If bounce management is activated and an email sent to the lead bounced, the date and time of the
	// bounce.
	//
	// Properties:Filter, Nillable, Sort, Update
	EmailBouncedDate types.Datetime `json:"EmailBouncedDate"`
	// EmailBouncedReason ...
	//
	// If bounce management is activated and an email sent to the lead bounced, the reason for the bounce.
	//
	//
	// Properties:Filter, Group, Nillable, Sort, Update
	EmailBouncedReason types.NullableString `json:"EmailBouncedReason"`
	// EmailMessageRelations ...
	EmailMessageRelations struct {
		Done      bool                    `json:"done"`
		Count     int                     `json:"count"`
		TotalSize int                     `json:"totalSize"`
		Records   []*EmailMessageRelation `json:"records"`
	} `json:"EmailMessageRelations"`
	// EmailStatuses ...
	EmailStatuses struct {
		Done      bool           `json:"done"`
		Count     int            `json:"count"`
		TotalSize int            `json:"totalSize"`
		Records   []*EmailStatus `json:"records"`
	} `json:"EmailStatuses"`
	// EventRelations ...
	EventRelations struct {
		Done      bool             `json:"done"`
		Count     int              `json:"count"`
		TotalSize int              `json:"totalSize"`
		Records   []*EventRelation `json:"records"`
	} `json:"EventRelations"`
	// Events ...
	Events struct {
		Done      bool     `json:"done"`
		Count     int      `json:"count"`
		TotalSize int      `json:"totalSize"`
		Records   []*Event `json:"records"`
	} `json:"Events"`
	// FavoriteBalloon__c ...
	FavoriteBalloon__c string `json:"FavoriteBalloon__c"`
	// FavoriteBalloon__r ...
	FavoriteBalloon__r *Balloon__c `json:"FavoriteBalloon__r"`
	// Fax ...
	//
	// The lead’s fax number.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Fax types.NullableString `json:"Fax"`
	// FeedSubscriptionsForEntity ...
	FeedSubscriptionsForEntity struct {
		Done      bool                  `json:"done"`
		Count     int                   `json:"count"`
		TotalSize int                   `json:"totalSize"`
		Records   []*EntitySubscription `json:"records"`
	} `json:"FeedSubscriptionsForEntity"`
	// Feeds ...
	Feeds struct {
		Done      bool        `json:"done"`
		Count     int         `json:"count"`
		TotalSize int         `json:"totalSize"`
		Records   []*LeadFeed `json:"records"`
	} `json:"Feeds"`
	// FirstName ...
	//
	// The lead’s first name up to 40 characters.
	//
	// Properties:Create, Filter, Group, Nillable, Sort,
	// Update
	FirstName types.NullableString `json:"FirstName"`
	// GeocodeAccuracy ...
	//
	// Accuracy level of the geocode for the address. For details on geolocation compound fields, see Compound
	// Field Considerations and Limitations.
	//
	// Properties:Create, Filter, Group, Retrieve, Query,
	// Restricted picklist, Nillable, Sort, Update
	GeocodeAccuracy types.NullableString `json:"GeocodeAccuracy"`
	// Histories ...
	Histories struct {
		Done      bool           `json:"done"`
		Count     int            `json:"count"`
		TotalSize int            `json:"totalSize"`
		Records   []*LeadHistory `json:"records"`
	} `json:"Histories"`
	// ID ...
	ID string `json:"Id"`
	// Individual ...
	Individual *Individual `json:"Individual"`
	// IndividualID ...
	//
	// ID of the data privacy record associated with this lead. This field is available if you enabled Data
	// Protection and Privacy in Setup.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	IndividualID string `json:"IndividualId"`
	// Industry ...
	//
	// Industry in which the lead works.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Industry types.NullableString `json:"Industry"`
	// IsConverted ...
	//
	// Indicates whether the lead has been converted (true) or not (false). Label is Converted.
	//
	//
	// Properties:Create, Defaulted on create, Filter, Group, Sort
	IsConverted bool `json:"IsConverted"`
	// IsDeleted ...
	//
	// Indicates whether the object has been moved to the Recycle Bin (true) or not (false). Label is
	// Deleted.
	//
	// Properties:Defaulted on create, Filter
	IsDeleted bool `json:"IsDeleted"`
	// IsUnreadByOwner ...
	//
	// If true, lead has been assigned, but not yet viewed. See Unread Leads for more information. Label is Unread
	// By Owner.
	//
	// Properties:Create, Defaulted on create, Filter, Group, Sort, Update
	IsUnreadByOwner bool `json:"IsUnreadByOwner"`
	// Jigsaw ...
	//
	// References the ID of a contact in Data.com. If a lead has a value in this field, it means that a contact was
	// imported as a lead from Data.com. If the contact (converted to a lead) was not imported from Data.com, the field value
	// is null. Maximum size is 20 characters. Available in API version 22.0 and later. Label is Data.com Key.
	// Important The Jigsawfield is exposed in the API to support troubleshooting for import errors and reimporting of
	// corrected data. Do not modify the value in the Jigsaw field.
	//
	// Properties:Create, Filter, Group, Nillable,
	// Sort, Update
	Jigsaw types.NullableString `json:"Jigsaw"`
	// JigsawContactID ...
	JigsawContactID types.NullableString `json:"JigsawContactId"`
	// LastActivityDate ...
	//
	// Value is the most recent of either: Due date of the most recent event logged against the record. Due date of
	// the most recently closed task associated with the record.
	//
	// Properties:Filter, Group, Nillable,
	// Sort
	LastActivityDate types.Date `json:"LastActivityDate"`
	// LastModifiedBy ...
	LastModifiedBy *User `json:"LastModifiedBy"`
	// LastModifiedByID ...
	LastModifiedByID string `json:"LastModifiedById"`
	// LastModifiedDate ...
	LastModifiedDate types.Datetime `json:"LastModifiedDate"`
	// LastName ...
	//
	// Required. Last name of the lead up to 80 characters.
	//
	// Properties:Create, Filter, Group, Sort,
	// Update
	LastName string `json:"LastName"`
	// LastReferencedDate ...
	//
	// The timestamp when the current user last accessed this record, a record related to this record, or a list
	// view.
	//
	// Properties:Filter, Nillable, Sort
	LastReferencedDate types.Datetime `json:"LastReferencedDate"`
	// LastViewedDate ...
	//
	// The timestamp when the current user last viewed this record or list view. If this value is null, the user
	// might have only accessed this record or list view (LastReferencedDate) but not viewed it.
	//
	//
	// Properties:Filter, Nillable, Sort
	LastViewedDate types.Datetime `json:"LastViewedDate"`
	// Latitude ...
	//
	// Used with Longitude to specify the precise geolocation of an address. Acceptable values are numbers
	// between –90 and 90 up to 15 decimal places. For details on geolocation compound fields, see Compound Field
	// Considerations and Limitations.
	//
	// Properties:Create, Filter, Nillable, Sort, Update
	Latitude types.NullableFloat64 `json:"Latitude"`
	// LeadCleanInfos ...
	LeadCleanInfos struct {
		Done      bool             `json:"done"`
		Count     int              `json:"count"`
		TotalSize int              `json:"totalSize"`
		Records   []*LeadCleanInfo `json:"records"`
	} `json:"LeadCleanInfos"`
	// LeadSource ...
	//
	// The lead’s source.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	LeadSource types.NullableString `json:"LeadSource"`
	// ListEmailIndividualRecipients ...
	ListEmailIndividualRecipients struct {
		Done      bool                            `json:"done"`
		Count     int                             `json:"count"`
		TotalSize int                             `json:"totalSize"`
		Records   []*ListEmailIndividualRecipient `json:"records"`
	} `json:"ListEmailIndividualRecipients"`
	// Longitude ...
	//
	// Used with Latitude to specify the precise geolocation of an address. Acceptable values are numbers
	// between –180 and 180 up to 15 decimal places. For details on geolocation compound fields, see Compound Field
	// Considerations and Limitations.
	//
	// Properties:Create, Filter, Nillable, Sort, Update
	Longitude types.NullableFloat64 `json:"Longitude"`
	// MasterRecord ...
	MasterRecord *Lead `json:"MasterRecord"`
	// MasterRecordID ...
	//
	// If this record was deleted as the result of a merge, this field contains the ID of the record that was kept. If
	// this record was deleted for any other reason, or has not been deleted, the value is null. Note When using Apex
	// triggers to determine which record was deleted in a merge event, this field’s value is the ID of the record that
	// remains in Trigger.old. In Trigger.new, the value is null.
	//
	// Properties:Filter, Group, Nillable, Sort
	MasterRecordID string `json:"MasterRecordId"`
	// MobilePhone ...
	//
	// The lead’s mobile phone number.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	MobilePhone types.NullableString `json:"MobilePhone"`
	// Name ...
	//
	// Concatenation of FirstName, MiddleName, LastName, and Suffix up to 203 characters, including
	// whitespaces.
	//
	// Properties:Filter, Group, Sort
	Name string `json:"Name"`
	// Notes ...
	Notes struct {
		Done      bool    `json:"done"`
		Count     int     `json:"count"`
		TotalSize int     `json:"totalSize"`
		Records   []*Note `json:"records"`
	} `json:"Notes"`
	// NotesAndAttachments ...
	NotesAndAttachments struct {
		Done      bool                 `json:"done"`
		Count     int                  `json:"count"`
		TotalSize int                  `json:"totalSize"`
		Records   []*NoteAndAttachment `json:"records"`
	} `json:"NotesAndAttachments"`
	// NumberOfEmployees ...
	//
	// Number of employees at the lead’s company. Label is Employees.
	//
	// Properties:Create, Filter,
	// Group, Nillable, Sort, Update
	NumberOfEmployees types.NullableInt `json:"NumberOfEmployees"`
	// NumberofLocations__c ...
	NumberofLocations__c types.NullableFloat64 `json:"NumberofLocations__c"`
	// OpenActivities ...
	OpenActivities struct {
		Done      bool            `json:"done"`
		Count     int             `json:"count"`
		TotalSize int             `json:"totalSize"`
		Records   []*OpenActivity `json:"records"`
	} `json:"OpenActivities"`
	// OutgoingEmailRelations ...
	OutgoingEmailRelations struct {
		Done      bool                     `json:"done"`
		Count     int                      `json:"count"`
		TotalSize int                      `json:"totalSize"`
		Records   []*OutgoingEmailRelation `json:"records"`
	} `json:"OutgoingEmailRelations"`
	// Owner ...
	Owner *GroupUser `json:"Owner"`
	// OwnerID ...
	//
	// ID of the lead’s owner.
	//
	// Properties:Create, Defaulted on create, Filter, Group, Sort, Update
	OwnerID string `json:"OwnerId"`
	// PersonRecord ...
	PersonRecord struct {
		Done      bool                        `json:"done"`
		Count     int                         `json:"count"`
		TotalSize int                         `json:"totalSize"`
		Records   []*UserEmailPreferredPerson `json:"records"`
	} `json:"PersonRecord"`
	// Phone ...
	//
	// The lead’s phone number.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Phone types.NullableString `json:"Phone"`
	// PhotoURL ...
	//
	// Path to be combined with the URL of a Salesforce instance (Example:
	// https://yourInstance.salesforce.com/) to generate a URL to request the social network profile image associated with the lead. Generated URL
	// returns an HTTP redirect (code 302) to the social network profile image for the lead. Empty if Social Accounts and
	// Contacts isn't enabled or if Social Accounts and Contacts has been disabled for the requesting user.
	//
	//
	// Properties:Filter, Group, Nillable, Sort
	PhotoURL types.NullableString `json:"PhotoUrl"`
	// PostalCode ...
	//
	// Postal code for the address of the lead. Label is Zip/Postal Code.
	//
	// Properties:Create, Filter,
	// Group, Nillable, Sort, Update
	PostalCode types.NullableString `json:"PostalCode"`
	// Primary__c ...
	Primary__c types.NullableString `json:"Primary__c"`
	// ProcessInstances ...
	ProcessInstances struct {
		Done      bool               `json:"done"`
		Count     int                `json:"count"`
		TotalSize int                `json:"totalSize"`
		Records   []*ProcessInstance `json:"records"`
	} `json:"ProcessInstances"`
	// ProcessSteps ...
	ProcessSteps struct {
		Done      bool                      `json:"done"`
		Count     int                       `json:"count"`
		TotalSize int                       `json:"totalSize"`
		Records   []*ProcessInstanceHistory `json:"records"`
	} `json:"ProcessSteps"`
	// ProductInterest__c ...
	ProductInterest__c types.NullableString `json:"ProductInterest__c"`
	// Rating ...
	//
	// Rating of the lead.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Rating types.NullableString `json:"Rating"`
	// RecordActionHistories ...
	RecordActionHistories struct {
		Done      bool                   `json:"done"`
		Count     int                    `json:"count"`
		TotalSize int                    `json:"totalSize"`
		Records   []*RecordActionHistory `json:"records"`
	} `json:"RecordActionHistories"`
	// RecordActions ...
	RecordActions struct {
		Done      bool            `json:"done"`
		Count     int             `json:"count"`
		TotalSize int             `json:"totalSize"`
		Records   []*RecordAction `json:"records"`
	} `json:"RecordActions"`
	// RecordAssociatedGroups ...
	RecordAssociatedGroups struct {
		Done      bool                        `json:"done"`
		Count     int                         `json:"count"`
		TotalSize int                         `json:"totalSize"`
		Records   []*CollaborationGroupRecord `json:"records"`
	} `json:"RecordAssociatedGroups"`
	// SICCode__c ...
	SICCode__c types.NullableString `json:"SICCode__c"`
	// Salutation ...
	//
	// Salutation for the lead.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Salutation types.NullableString `json:"Salutation"`
	// ServiceAppointments ...
	ServiceAppointments struct {
		Done      bool                  `json:"done"`
		Count     int                   `json:"count"`
		TotalSize int                   `json:"totalSize"`
		Records   []*ServiceAppointment `json:"records"`
	} `json:"ServiceAppointments"`
	// Shares ...
	Shares struct {
		Done      bool         `json:"done"`
		Count     int          `json:"count"`
		TotalSize int          `json:"totalSize"`
		Records   []*LeadShare `json:"records"`
	} `json:"Shares"`
	// State ...
	//
	// State for the address of the lead.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	State types.NullableString `json:"State"`
	// Status ...
	//
	// Status code for this converted lead. Status codes are defined in Status and represented in the API by the
	// LeadStatus object.
	//
	// Properties:Create, Defaulted on create, Filter, Group, Sort, Update
	Status string `json:"Status"`
	// Street ...
	//
	// Street number and name for the address of the lead.
	//
	// Properties:Create, Filter, Group, Nillable,
	// Sort, Update
	Street types.NullableString `json:"Street"`
	// SystemModstamp ...
	SystemModstamp types.Datetime `json:"SystemModstamp"`
	// Tasks ...
	Tasks struct {
		Done      bool    `json:"done"`
		Count     int     `json:"count"`
		TotalSize int     `json:"totalSize"`
		Records   []*Task `json:"records"`
	} `json:"Tasks"`
	// Title ...
	//
	// Title for the lead, such as CFO or CEO.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Title types.NullableString `json:"Title"`
	// TopicAssignments ...
	TopicAssignments struct {
		Done      bool               `json:"done"`
		Count     int                `json:"count"`
		TotalSize int                `json:"totalSize"`
		Records   []*TopicAssignment `json:"records"`
	} `json:"TopicAssignments"`
	// UndecidedEventRelations ...
	UndecidedEventRelations struct {
		Done      bool                      `json:"done"`
		Count     int                       `json:"count"`
		TotalSize int                       `json:"totalSize"`
		Records   []*UndecidedEventRelation `json:"records"`
	} `json:"UndecidedEventRelations"`
	// Website ...
	//
	// Website for the lead.
	//
	// Properties:Create, Filter, Group, Nillable, Sort, Update
	Website types.NullableString `json:"Website"`
}
